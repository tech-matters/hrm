openapi: 3.0.0
servers:
  - description: localhost
    url: http://localhost:8080
  - description: staging
    url: https://hrm-staging.tl.techmatters.org
info:
  version: 0.3.6
  title: HRM
tags:
  - name: cases
  - name: contacts
paths:
  /cases:
    get:
      tags:
        - cases
      summary: list cases for a helpline
      operationId: getCases
      parameters:
        - in: query
          name: helpline
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Fetched cases
          content:
              application/json:
                schema:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/SequelizeRecord'
                      - $ref: '#/components/schemas/Case'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - cases
      summary: create case
      operationId: createCase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Case'
        description: Case to create
      responses:
        '200':
          description: Created case
          content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/SequelizeRecord'
                    - $ref: '#/components/schemas/Case'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /cases/{caseId}:
    put:
      tags:
        - cases
      summary: update case
      operationId: updateCase
      parameters:
        - name: caseId
          in: path
          description: ID of case to update
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Case'
        description: Case to create
      responses:
        '200':
          description: Created case
          content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/SequelizeRecord'
                    - $ref: '#/components/schemas/Case'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Case not found
  /contacts/{contactId}/connectToCase:
    put:
      tags:
        - contacts
      summary: connect contact to a given case
      operationId: connectToCase
      parameters:
        - name: contactId
          in: path
          description: ID of contact to connect
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - caseId
              properties:
                caseId:
                  type: integer
                  format: int32
                example: { "caseId": 1 }
        description: caseId to connect to
      responses:
        '200':
          description: Connected contact to case
          content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/SequelizeRecord'
                    - $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Case or contact not found
components:
  schemas:
    SequelizeRecord:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int32
          example: 27
        createdAt:
          type: string
          format: date-time
          example: '2020-03-19T15:03:03.042Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-04-29T22:18:19.663Z'
    Case:
      type: object
      required:
        - status
        - helpline
        - info
      properties:
        status:
          type: string
          example: open
        helpline:
          type: string
          example: helpline-1
        info:
          type: object
          example: { "notes": "Child with covid-19" }
    Contact:
      type: object
      required:
        - taskId
        - reservationId
        - rawJson
        - queueName
        - twilioWorkerId
        - helpline
        - number
        - channel
        - conversationDuration
      properties:
        timestamp:
          type: integer
          format: int64
          example: 1565827981000
        taskId:
          type: string
          example: WTc8145e01d854f131d6925019ae38231f
        reservationId:
          type: string
          example: WS17ce7c9cf654a4b240031ff7b17e7d93
        rawJson:
          type: object
          example: { "callType": {}, "callerInformation": {}, "childInformation": {}, "caseInformation": {} }
        queueName:
          type: string
          example: Admin
        twilioWorkerId:
          type: string
          example: WZd3d289370720216aab7e3dc023e80f5f
        helpline:
          type: string
          example:
        number:
          type: string
          example: '+12025550163'
        channel:
          type: string
          example: web
        conversationDuration:
          type: integer
          format: int32
          example: 42
  responses:
    UnauthorizedError:
      description: API Key is missing or invalid
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
security:
  - apiKey: []